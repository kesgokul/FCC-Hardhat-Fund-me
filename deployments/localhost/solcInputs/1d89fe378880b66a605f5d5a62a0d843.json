{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"./lib/Conversion.sol\";\n\nerror FundMe__NotOwner();\nerror FundMe_WithdrawFailed();\n\ncontract FundMe {\n    using Conversion for uint256;\n\n    uint256 constant MIN_USD_AMOUNT = 50;\n    address[] private s_funders;\n    address private immutable i_owner;\n    mapping(address => uint256) private s_fundersToAmount;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    constructor(address s_priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == owner, \"You are not the owner\");\n        if (msg.sender != i_owner) revert FundMe__NotOwner(); // new gas optimized way\n        _;\n    }\n\n    // Fallbacks\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        //1. get the conversion rate usd/eth\n        //2. check if it meets the min usd val\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD_AMOUNT,\n            \"Did not send enought Ether\"\n        );\n        s_funders.push(msg.sender);\n        s_fundersToAmount[msg.sender] = msg.value;\n    }\n\n    //Function to withdraw funds from the contract and reset the mapping of s_funders\n    function withdraw() public onlyOwner {\n        //1. reset mapping of s_fundersToAmount\n        for (uint256 i = 0; i < s_funders.length; i++) {\n            address funder = s_funders[i];\n            s_fundersToAmount[funder] = 0;\n        }\n\n        //2. reset the s_funders array\n        s_funders = new address[](0);\n\n        //3. Withdraw the contract funds to the owner\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Transfer failed\");\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory funders = s_funders;\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            s_fundersToAmount[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!callSuccess) revert FundMe_WithdrawFailed();\n    }\n\n    // view and pure functions\n    function getFunders(uint256 _index) public view returns (address) {\n        return s_funders[_index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFundersToAmount(address _funder) public view returns (uint256) {\n        return s_fundersToAmount[_funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/lib/Conversion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary Conversion {\n    function getLatestPrice(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 _ethValue,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getLatestPrice(priceFeed);\n        uint256 ethInUsd = (_ethValue * ethPrice) / 1e18;\n        return ethInUsd;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}